/*
 * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com)
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package io.ballerina.xsd.cli;

import io.ballerina.projects.util.ProjectUtils;
import io.ballerina.xsd.core.Response;
import io.ballerina.xsd.core.XSDToRecord;
import org.w3c.dom.Document;
import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import picocli.CommandLine;
import io.ballerina.cli.BLauncherCmd;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Scanner;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import static io.ballerina.xsd.core.visitor.XSDVisitorImpl.EMPTY_STRING;

/**
 * Main class to implement "xsd" command for ballerina.
 */
@CommandLine.Command(
        name = "xsd",
        description = "Generates Ballerina records for XSD specification"
)
public class XsdCmd implements BLauncherCmd {
    private static final String CMD_NAME = "xsd";
    private static final String FILE_OVERWRITE_PROMPT = "The file '%s' already exists at %s. Overwrite? (y/N): ";
    public static final String INVALID_BALLERINA_DIRECTORY_ERROR =
            "Invalid Ballerina package directory: %s, cannot find 'Ballerina.toml' file";
    public static final String INVALID_DIRECTORY_PATH = "Error: Invalid directory path has been provided. " +
            "Output path '%s' is a file";
    private static final String AUTO_GENERATED_MESSAGE = "// AUTO-GENERATED FILE. DO NOT MODIFY.\n" +
            "// This file is auto-generated by the Ballerina XSD tool.";
    public static final String OUTPUT_FILE_NAME = "types";
    public static final String OUTPUT_FILE_EXTENSION = ".bal";
    private final PrintStream outStream;
    private final boolean exitWhenFinish;
    @CommandLine.Option(names = {"-h", "--help"}, hidden = true)
    private boolean helpFlag;

    @CommandLine.Parameters(description = "Input file path of the XSD schema")
    private String input = "";

    @CommandLine.Option(names = {"-m", "--module"}, description = "The name of the module in which the Ballerina " +
            "client and record types are generated.")
    private String outputPath = "";

    public XsdCmd() {
        this.outStream = System.err;
        this.exitWhenFinish = true;
    }

    @Override
    public void execute() {
        if (this.helpFlag) {
            StringBuilder stringBuilder = new StringBuilder();
            printLongDesc(stringBuilder);
            outStream.println(stringBuilder);
            return;
        }
        Path currentDir = Paths.get("").toAbsolutePath();
        if (!ProjectUtils.isBallerinaProject(currentDir)) {
            outStream.printf(INVALID_BALLERINA_DIRECTORY_ERROR + "%n", currentDir);
            exitOnError();
            return;
        }
        if (!ProjectUtils.validateModuleName(outputPath)) {
            outStream.println("ERROR: invalid module name : '" + outputPath + "' :\n" +
                    "module name can only contain alphanumerics, underscores and periods");
            exitOnError();
            return;
        } else if (!ProjectUtils.validateNameLength(outputPath)) {
            outStream.println("ERROR: invalid module name : '" + outputPath + "' :\n" +
                    "maximum length of module name is 256 characters");
            exitOnError();
            return;
        }
        Path outputDirPath = Paths.get(outputPath).toAbsolutePath();
        if (!Objects.equals(outputPath, EMPTY_STRING)) {
            Path basePath = Paths.get("modules").toAbsolutePath();
            outputDirPath = basePath.resolve(outputPath).normalize();
        }
        if (Files.exists(outputDirPath) && !Files.isDirectory(outputDirPath)) {
            outStream.printf(INVALID_DIRECTORY_PATH + "%n", outputPath);
            exitOnError();
            return;
        }
        if (input.isEmpty()) {
            outStream.println("An XSD file path or directory is required to generate the types");
            outStream.println("e.g: bal xsd <xsd source file/directory path>");
            exitOnError();
            return;
        }
        try {
            if (!Files.isDirectory(Path.of(input))) {
                handleSingleFile(outputDirPath, input);
            } else {
                handleDirectory(outputDirPath, input);
            }
        } catch (ParserConfigurationException | SAXException e) {
            outStream.println("XSD file contains errors. " + e.getLocalizedMessage());
        } catch (IOException e) {
            outStream.println("Error occurred while accessing the file. " + e.getLocalizedMessage());
        } catch (Exception e) {
            outStream.println("Error: " + e.getLocalizedMessage());
            exitOnError();
        }
    }

    private void handleSingleFile(Path outputDirPath, String fileName) throws Exception {
        Path filePath = Path.of(fileName);
        if (!Files.exists(filePath)) {
            outStream.println(fileName + " file does not exist.");
            exitOnError();
            return;
        }
        if (!fileName.endsWith(".xsd") && !fileName.endsWith(".xml")) {
            outStream.println("The provided file is not a XSD/XML file. Please provide a valid XSD file.");
            exitOnError();
            return;
        }
        String xmlFileContent = Files.readString(filePath);
        Document document = parseXSD(xmlFileContent);
        Response result = XSDToRecord.convert(document);
        if (!result.diagnostics().isEmpty()) {
            result.diagnostics().forEach(xsdDiagnostic -> outStream.println(xsdDiagnostic.toString()));
            exitOnError();
            return;
        }
        writeSourceToFiles(outputDirPath, result, OUTPUT_FILE_NAME + OUTPUT_FILE_EXTENSION);
    }

    private void handleDirectory(Path outputDirPath, String directory) throws Exception {
        File[] directoryFiles;
        try {
            directoryFiles = getXsdFiles(directory);
        } catch (Exception e) {
            throw new Exception(e.getMessage());
        }
        if (Files.notExists(outputDirPath)) {
            Files.createDirectories(outputDirPath);
        }
        Map<Document, String> documents = new LinkedHashMap<>();
        for (File file : directoryFiles) {
            String xmlFileContent = Files.readString(file.toPath());
            Document document = parseXSD(xmlFileContent);
            documents.put(document, file.getName().substring(0, file.getName().lastIndexOf('.')));
        }
        Map<String, Response> result = XSDToRecord.convert(documents);
        for (Map.Entry<String, Response> entry : result.entrySet()) {
            writeSourceToFiles(outputDirPath, entry.getValue(), entry.getKey());
        }
    }

    private void writeSourceToFiles(Path outputPath, Response response, String outputName) throws IOException {
        Path clientPath = outputPath.resolve(outputName);
        String fileName = clientPath.getFileName().toString();
        if (Files.exists(clientPath)) {
            outStream.printf(FILE_OVERWRITE_PROMPT, fileName, getModuleName(clientPath));
            String overwriteAccess = new Scanner(System.in).nextLine().trim().toLowerCase();
            if (overwriteAccess.equals("y")) {
                generateFile(response.types(), clientPath, fileName);
            } else {
                outStream.printf("The operation is cancelled %n");
            }
        } else {
            generateFile(response.types(), clientPath, fileName);
        }
    }

    public static File[] getXsdFiles(String directoryPath) throws Exception {
        File directory = new File(directoryPath);
        if (!directory.exists() || !directory.isDirectory()) {
            throw new Exception("The provided directory path is invalid.");
        }
        FilenameFilter filter = (dir, name) -> name.endsWith(".xsd") || name.endsWith(".xml");
        File[] files = directory.listFiles(filter);
        if (files == null || files.length == 0) {
            throw new Exception("No .xsd or .xml files found in the provided directory.");
        }
        return files;
    }

    private void generateFile(String content, Path clientPath, String fileName) throws IOException {
        Files.writeString(clientPath, addAutoGeneratedMessage(content));
        String outputModule = getModuleName(clientPath);
        outStream.printf("The '%s' file is written to %s %n", fileName, outputModule);
    }

    private static String getModuleName(Path clientPath) {
        String outputModule;
        String destinationPath = clientPath.toString();
        if (destinationPath.contains("modules")) {
            int startIndex = destinationPath.indexOf("modules");
            int endIndex = destinationPath.lastIndexOf("/");
            if (endIndex > startIndex) {
                outputModule = destinationPath.substring(startIndex, endIndex);
            } else {
                outputModule = destinationPath.substring(startIndex);
            }
        } else {
            outputModule = "the default module";
        }
        return outputModule;
    }

    private String addAutoGeneratedMessage(String content) {
        return AUTO_GENERATED_MESSAGE + "\n\n" + content;
    }

    private static Document parseXSD(String xsdData) throws Exception {
        ByteArrayInputStream inputStream = new ByteArrayInputStream(xsdData.getBytes(StandardCharsets.UTF_8));
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        dbFactory.setNamespaceAware(true);
        DocumentBuilder docBuilder;
        try {
            docBuilder = dbFactory.newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            throw new ParserConfigurationException(e.getLocalizedMessage());
        }
        docBuilder.setErrorHandler(new ErrorHandler() {
            @Override
            public void warning(SAXParseException exception) {
                throw new RuntimeException(exception);
            }

            @Override
            public void error(SAXParseException exception) {
                throw new RuntimeException(exception);
            }

            @Override
            public void fatalError(SAXParseException exception) {
                throw new RuntimeException(exception);
            }
        });
        try {
            return docBuilder.parse(inputStream);
        } catch (SAXException e) {
            throw new SAXException(e);
        } catch (IOException e) {
            throw new IOException(e);
        }
    }

    @Override
    public String getName() {
        return CMD_NAME;
    }

    @Override
    public void printLongDesc(StringBuilder outStream) {
        Class<?> clazz = XsdCmd.class;
        ClassLoader classLoader = clazz.getClassLoader();
        InputStream inputStream = classLoader.getResourceAsStream("cli-docs/xsd-help.help");
        if (inputStream != null) {
            try (InputStreamReader inputStreamREader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
                 BufferedReader br = new BufferedReader(inputStreamREader)) {
                String content = br.readLine();
                outStream.append(content);
                while ((content = br.readLine()) != null) {
                    outStream.append('\n').append(content);
                }
            } catch (IOException e) {
                outStream.append("Helper text is not available.");
            }
        }
    }

    @Override
    public void printUsage(StringBuilder stringBuilder) {
    }

    @Override
    public void setParentCmdParser(CommandLine parentCmdParser) {
    }

    private void exitOnError() {
        if (exitWhenFinish) {
            Runtime.getRuntime().exit(1);
        }
    }
}
